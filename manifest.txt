ContainerPort:
  - name: app
    port: 3838
    servicePort: 80
EnvVariables: []
GracePeriod: 30
appLabels:
  Environment: prod
LivenessProbe:
  Path: ""
  command: []
  failureThreshold: 3
  httpHeaders: []
  initialDelaySeconds: 40
  periodSeconds: 10
  port: 3838
  scheme: ""
  successThreshold: 1
  tcp: false
  timeoutSeconds: 5
MaxSurge: 1
MaxUnavailable: 0
MinReadySeconds: 60
ReadinessProbe:
  Path: ""
  command: []
  failureThreshold: 3
  httpHeaders: []
  initialDelaySeconds: 40
  periodSeconds: 10
  port: 3838
  scheme: ""
  successThreshold: 1
  tcp: false
  timeoutSeconds: 5
Spec:
  Affinity:
    Key: null
    Values: nodes
    key: ""
args:
  enabled: false
  value:
    - /bin/sh
    - -c
    - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
autoscaling:
  MaxReplicas: 2
  MinReplicas: 1
  TargetCPUUtilizationPercentage: 90
  TargetMemoryUtilizationPercentage: 80
  enabled: true
command:
  enabled: false
  value: []
containers: []
dbMigrationConfig:
  enabled: false
env:
  - name: JVM_OPTS
    value: -Xms1g -Xmx3g -XX:+UseG1GC -XX:InitiatingHeapOccupancyPercent=70 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp/heapdump -XX:+ExitOnOutOfMemoryError
envoyproxy:
  configMapName: ""
  image: envoyproxy/envoy:v1.14.1
image:
  pullPolicy: IfNotPresent
ingressInternal:
  annotations:
    kubernetes.io/ingress.class: nginx-nlb
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/send_timeout: "600"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token,app_info,app_version,clientName,hash,clientid,installId,simId,device,appversion,platform,longitude,latitude, sec-ch-ua, sec-ch-ua-mobile, Accept, Referer, sec-ch-ua-platform
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
  enabled: true
  hosts:
    - host: modelmonitoring.bharatpe.in
      pathType: ImplementationSpecific
      paths:
        - /
  tls: []
ingress:
  annotations:
    kubernetes.io/ingress.class: nginx-nlb
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/send_timeout: "600"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS
    nginx.ingress.kubernetes.io/cors-allow-headers: DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,token,app_info,app_version,clientName,hash,clientid,installId,simId,device,appversion,platform,longitude,latitude, sec-ch-ua, sec-ch-ua-mobile, Accept, Referer, sec-ch-ua-platform
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
  enabled: false
  hosts:
    - host: ""
      pathType: ImplementationSpecific
      paths:
        - /
  tls: []
initContainers: []
pauseForSecondsBeforeSwitchActive: 30
prometheus:
  release: monitoring
replicaCount: 1
resources:
  limits:
    cpu: "2.5"
    memory: 2500Mi
  requests:
    cpu: "1.4"
    memory: 1800Mi
secret:
  data: {}
  enabled: false
server:
  deployment:
    image: ""
    image_tag: 1-95af053
service:
  annotations: {}
  type: ClusterIP
servicemonitor:
  enabled: true
rawYaml:
  - apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: modelmonitoring-pv
    spec:
      capacity:
        storage: 2Gi
      volumeMode: Filesystem
      accessModes:
        - ReadWriteMany
      persistentVolumeReclaimPolicy: Retain
      storageClassName: model-efs-sc
      csi:
        driver: efs.csi.aws.com
        volumeHandle: fs-0df84352a3547f60c
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: model-efs-claim
    spec:
      accessModes:
        - ReadWriteMany
      storageClassName: model-efs-sc
      resources:
        requests:
          storage: 2Gi
volumeMounts:
  - mountPath: /srv/shiny-server/uploads
    name: uploads-efs
    subPath: uploads
  - mountPath: /var/log/shiny-server
    name: uploads-efs
    subPath: logs
volumes:
  - name: uploads-efs
    persistentVolumeClaim:
      claimName: model-efs-claim
waitForSecondsBeforeScalingDown: 30
